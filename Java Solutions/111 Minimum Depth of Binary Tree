/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// BFS
//  Complexity:

// Time: In the worst case for a balanced tree, we need to visit all nodes level by level up to the tree height, 
// that excludes the bottom level only. This way we visit N/2 nodes, and thus the time complexity is O(N).
// Space: O(N)
class Solution {
    public int minDepth(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();  
        // corner case
        if (root == null) return 0;
        q.add(root);
        // the depth of root is 1
        int depth = 1;
        
        while (!q.isEmpty()) {
            int size = q.size();
            // spread the nodes in the queue
            for (int i = 0; i < size; i++){
                // get the head of the node by poll()
                TreeNode current = q.poll();
                if (current.left == null && current.right == null){
                    return depth;
                }
                if (current.left != null) {
                    q.add(current.left);
                }
                if (current.right != null) {
                    q.add(current.right);
                }
            }
            // only update the depth after adding neighbour nodes to the queue
            depth++;            
        }
        return depth;
    }
}