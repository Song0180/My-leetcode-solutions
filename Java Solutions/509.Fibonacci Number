class Solution1 {
    // recursive solution
    public int fib(int n) {
        if (n < 1) {
            return 0;
        }
        // base case
        if (n == 1 || n == 2) {
            return 1;
        }
        return fib(n - 1) + fib(n - 2);
    }
}

class Solution2 {
    // recursive solution with memo
    public int fib(int n) {
        if (n < 1) {
            return 0;
        }
        // initialize the memo with 0s
        int[] memo = new int[n+1];
        Arrays.fill(memo, 0);
        // recursive calls
        return helper(memo, n);
    }
    
    public int helper(int[] memo, int n){
        // base case
        if (n == 1 || n == 2) return 1;
        // already calculated
        if (memo[n] != 0) return memo[n];
        memo[n] = helper(memo, n-1) + helper(memo, n-2);
        return memo[n];
    }
}

class Solution3 {
    // iterative solution with dp array
    public int fib(int n) {
        if (n < 1) return 0;
        if (n == 1 || n == 2) return 1;
        // initialize dp array
        int[] dp = new int[n + 1];
        Arrays.fill(dp, 0);
        // base case
        dp[1] = dp[2] = 1;
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}